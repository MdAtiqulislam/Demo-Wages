package demo_wages;

import static demo_wages.DBconnect.connection;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author MJIL
 */
public class MainPage extends javax.swing.JFrame {

    private final int deduction;

     GridBagLayout layout=new GridBagLayout();
     WagesByEmployee wagesByEmployee;
     PendingWagesTokenEntryPanel pendingWagesTokenEntryPanel;
     PaymentPendingWagesPanel paymentPendingWagesPanel;
     MachineWages machineWages;
     Reports reports;
     BuyerOrders buyerOrders;
     Products products;
     NewOrder newOrder;
     WeavingProduction weavingProduction;
    /**
     * Creates new form Wages
     */
   

    public MainPage() {
        this.deduction = 0;
        initComponents();
        machineWages=new MachineWages();
        wagesByEmployee=new WagesByEmployee();
        paymentPendingWagesPanel=new PaymentPendingWagesPanel();
        pendingWagesTokenEntryPanel=new PendingWagesTokenEntryPanel();
        reports=new Reports();
        buyerOrders=new BuyerOrders();
        products=new Products();
        newOrder=new NewOrder();
        weavingProduction=new WeavingProduction();
        
       // setExtendedState(JFrame.MAXIMIZED_BOTH);
        connection = DBconnect.dbconnect();
       // getWeekInfo();
        this.setLocationRelativeTo(this);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("account.png")));
        
         containerPanel.setLayout(layout);
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 0;
        containerPanel.add(machineWages, c);
        GridBagConstraints c1 = new GridBagConstraints();
        c1.gridx = 0;
        c1.gridy = 0;
        containerPanel.add(wagesByEmployee, c1);
        GridBagConstraints c2 = new GridBagConstraints();
        c2.gridx = 0;
        c2.gridy = 0;
        containerPanel.add(pendingWagesTokenEntryPanel, c2);
        
        GridBagConstraints c3 = new GridBagConstraints();
        c3.gridx = 0;
        c3.gridy = 0;
        containerPanel.add(paymentPendingWagesPanel, c3);
        GridBagConstraints c4 = new GridBagConstraints();
        c4.gridx = 0;
        c4.gridy = 0;
        containerPanel.add(reports, c4);
        GridBagConstraints c5 = new GridBagConstraints();
        c5.gridx = 0;
        c5.gridy = 0;
        containerPanel.add(buyerOrders, c5);
        GridBagConstraints c6 = new GridBagConstraints();
        c6.gridx = 0;
        c6.gridy = 0;
        containerPanel.add(products, c6);
        GridBagConstraints c7 = new GridBagConstraints();
        c7.gridx = 0;
        c7.gridy = 0;
        containerPanel.add(newOrder, c7);
        GridBagConstraints c8 = new GridBagConstraints();
        c8.gridx = 0;
        c8.gridy = 0;
        containerPanel.add(weavingProduction, c8);
        
        
        machineWages.setVisible(true);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        btnNewOrder = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        containerPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setBackground(new java.awt.Color(0, 0, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Madina Jute Industries LTD");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton2.setText("Reports");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Wages By Employee");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Pending Wages Token Entry");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Main Page");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Payment Pending Wages");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        btnNewOrder.setText("Buyer Orders");
        btnNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewOrderActionPerformed(evt);
            }
        });

        jButton1.setText("Products");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton8.setText("Weaving Wages");

        jButton3.setText("New Order");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setText("Weaving Production");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNewOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addGap(52, 52, 52)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addGap(51, 51, 51)
                .addComponent(jButton2)
                .addContainerGap(199, Short.MAX_VALUE))
        );

        containerPanel.setMinimumSize(new java.awt.Dimension(1000, 600));

        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        containerPanelLayout.setVerticalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setText("Setup Week");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);
        jMenu2.add(jSeparator2);

        jMenuItem2.setText("Running Week");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);
        jMenu2.add(jSeparator3);

        jMenuItem9.setText("Allowance Setup");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);
        jMenu2.add(jSeparator5);

        jMenuItem7.setText("Edit Wages by Employee");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenu5.setText("Department");

        jMenuItem10.setText("Base Department");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem11.setText("All Department");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        jMenu2.add(jMenu5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Pending Wages");

        jMenuItem3.setText("Panding Wages Token Entry");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);
        jMenu3.add(jSeparator1);

        jMenuItem4.setText("Paymennt Pending Wages");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);
        jMenu3.add(jSeparator4);

        jMenuItem8.setText("Pending List");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Block wages");

        jMenuItem5.setText("Blocked List");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuItem6.setText("Unblock");
        jMenu4.add(jMenuItem6);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        new WeekSetup().setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        new RunningWeek().setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        new EditWagesByEmployee().setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        new PendingWagesTokenEntry().setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        new PreviewList("Pending List").setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        new PreviewList("Block List").setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        new PaymentPendingWages().setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        wagesByEmployee.setVisible(false);
        machineWages.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(true);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        //wagesByEmployee=new WagesByEmployee();
        wagesByEmployee.setVisible(true);
        machineWages.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         machineWages.setVisible(false);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(true);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        machineWages.setVisible(true);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVerifyInputWhenFocusTarget(false);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        machineWages.setVisible(false);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(true);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void btnNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewOrderActionPerformed
        // TODO add your handling code here:
        machineWages.setVisible(false);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(false);
        buyerOrders.setVisible(true);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
    }//GEN-LAST:event_btnNewOrderActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        machineWages.setVisible(false);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(true);
        newOrder.setVisible(false);
        weavingProduction.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        machineWages.setVisible(false);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(true);
        weavingProduction.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        new AllowanceManagement().setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        new BaseDepartment().setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        new Department().setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        machineWages.setVisible(false);
        wagesByEmployee.setVisible(false);
        pendingWagesTokenEntryPanel.setVisible(false);
        paymentPendingWagesPanel.setVisible(false);
        reports.setVisible(false);
        buyerOrders.setVisible(false);
        products.setVisible(false);
        newOrder.setVisible(false);
        weavingProduction.setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewOrder;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private java.awt.Panel panel1;
    // End of variables declaration//GEN-END:variables

    private double getOtTime(String workDayOT) throws ParseException {
        SimpleDateFormat timeFormeter = new SimpleDateFormat("HH:mm:ss");
        Date time = timeFormeter.parse(workDayOT);
        double hour = time.getHours() + ((double) time.getMinutes() / 60.0);
        hour = Double.parseDouble(new DecimalFormat(".##").format(hour));
        //System.err.println(hour);
        return hour;
    }

    private double getWorkTime(String workDayOT) throws ParseException {
        SimpleDateFormat timeFormeter = new SimpleDateFormat("HH:mm");
        Date time = timeFormeter.parse(workDayOT);
        double hour = time.getHours() + ((double) time.getMinutes() / 60.0);
        hour = Double.parseDouble(new DecimalFormat(".##").format(hour));
        //System.err.println(hour);
        return hour;
    }

    private boolean checkData(String cardNo, java.sql.Date sqldate) {
        try {
            String sql = "select * from over_time where card_no='" + cardNo + "' and date='" + sqldate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

 /*   private void calculateWages() {
        //getting attendence and night allowance 

        int length = 0;
        try {
            String sql = "SELECT COUNT(id) FROM employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                length = rs.getInt("COUNT(id)");
            }
        } catch (Exception e) {
        }

        int i = 0;
        try {
            String sql = "select * from allo_management";
            PreparedStatement st = connection.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                attnAllowance = rs.getInt("att_allo");
                nightAllowance = rs.getInt("night_allo");
                redAllowance = rs.getInt("red_night_all");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            String sql = "select * from employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {

                lbl_data.paintImmediately(0, 0, 1000, 100);
                lbl_data.setText("Calculating Attendence Time");
                i++;
                progressbar.setValue(i);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setMaximum(length);

                cardNo = rs.getInt("card_no");
                
                if(rs.getString("pay_able_code")!=null){
                    if(rs.getString("pay_able_code").equals("c")){
                    deduction=0;
                }else if(rs.getString("pay_able_code").equals("g")){
                    deduction=10;
                }
                }
               
                getAttendenceInfo(cardNo);
                getOTInfo(cardNo);
                totalAttendanceData(cardNo);
                resetFieldVariable();
            }
            lbl_data.setText("");
            progressbar.setValue(0);
            //JOptionPane.showMessageDialog(this, length + " data upload successfull.");

            finalCalculation();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void getWagesInfo(String designation, String department) {
        try {
            String sql = "select * from wages_mangement where department='" + department + "' and designation='" + designation + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                wagesRate = rs.getInt("wages_rate");
                // otRate = rs.getInt("ot_rate");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getAttendenceInfo(int cardNo) {
        double workHour;
        
        try {
            String sql = "select * from attendance where card_no='" + cardNo + "' and "
                    + "(date between '" + sqlStartDate + "' and '" + sqlEndDate + "')";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
               r_ddepartment= rs.getString("department");
               
                runningDepartment = getDepartmentDisplayName(r_ddepartment);
                runningShift = rs.getString("time_table");
                workHour = rs.getDouble("work_time");
                if (workHour >= 7.5) {
                    workHour = 8.0;
                }
                totalWorkHour += workHour;

            }
            finallWorkHour = (int) Math.round(totalWorkHour);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void getOTInfo(int cardNo) {
        double workDayOT, weekendOT, hollydayOT;
        try {
            String sql = "select * from over_time where card_no='" + cardNo + "' and "
                    + "(date between '" + sqlStartDate + "' and '" + sqlEndDate + "')";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                workDayOT = rs.getDouble("work_day_ot");
                weekendOT = rs.getDouble("weekend_ot");
                hollydayOT = rs.getDouble("holly_day_ot");
                if (workDayOT >= 6.5) {
                    workDayOT = 8;
                }
                if (weekendOT >= 6.5) {
                    weekendOT = 8;
                }
                if (hollydayOT >= 6.5) {
                    hollydayOT = 8;
                }
                totalOT += workDayOT + weekendOT + hollydayOT;

            }
            totalOT = Math.round(totalOT);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void resetFieldVariable() {
        runningDepartment = "";
        // millWorkingDay = 0;

        //attnAllowance = 0;
        //nightAllowance = 0;
        // redAllowance = 0;
        designation = "";
        department = "";
        releiverAllowance = 0;
        specialAllowance = 0;
        extraAllowance = 0;
        cardNo = 0;
        wagesRate = 0;
        otRate = 0;
        runningShift = "";
        r_ddepartment="";
        deduction=0;

        totalWorkHour = 0;
        finallWorkHour = 0;
        totalOT = 0;
        blockStatus = 0;
        fWorkHour=0;
        fOThour=0;
        fHollyDayHour=0;
    }

    private void calculate() {        
        
        getTotalAttendenceData();
      
       // System.out.println("demo_wages.Wages.calculate()"+fWorkHour);
        if(elegibleForWages(fWorkHour)){
            System.err.println("Elegibal");
            double basic, totalAttendanceAllowance, totalNightAllowance, 
                    totalReleiverAllowance, totalSpecialAllowance, payable, totalOtAllowance,netPayable;
        basic = (fWorkHour / 8.0) * wagesRate;
        hollyDayAllo = (fHollyDayHour / 8) * wagesRate;
        if (fWorkHour >= millWorkingHour) {
            totalAttendanceAllowance = (fWorkHour / 8) * attnAllowance;
        } else {
            totalAttendanceAllowance = 0;
        }

        if (runningShift.equals("Night") && fWorkHour >= millWorkingHour) {
            totalNightAllowance = nightAllowance * (fWorkHour / 8);
        } else if (runningShift.equals("Night") && fWorkHour < millWorkingHour) {
            totalNightAllowance = redAllowance * (fWorkHour / 8);
        } else {
            totalNightAllowance = 0;
        }
        
        

        totalReleiverAllowance = (fWorkHour / 8) * releiverAllowance;
        totalSpecialAllowance = (fWorkHour / 8) * specialAllowance;
        payable = basic + totalAttendanceAllowance + totalNightAllowance + totalReleiverAllowance + totalSpecialAllowance+extraAllowance;
        

        totalOtAllowance = (fOThour / 8.0) * otRate;
        doubleWages=totalOtAllowance;
        payable += totalOtAllowance + hollyDayAllo;
        
        
        //Add 10 tk/day for Softner Department
        if(runningDepartment.equals("2001")){
            payable+=(fWorkHour / 8)*10;
            totalSpecialAllowance+=(fWorkHour / 8)*10;
        }
          //  System.err.println(runningDepartment);
        
        
        lbl_data.paintImmediately(0, 0, 1000, 100);
        lbl_data.setText(cardNo + " " + name + " " + payable);
        //System.out.println(cardNo + "\t" + fWorkHour);
        netPayable=payable-deduction;

        checkBlockWages();
        if (blockStatus == 1) {
            try {
                String sql = "insert into block (card_no,r_department,r_shift,endofweek,wohrs,"
                        + "rate,bill_amount,paid_amount,paid_date,ot_hrs,ot_wages,reson_to_paid,"
                        + "block_status,department,name,double_wages) "
                        + "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setInt(1, cardNo);
                statement.setString(2, runningDepartment);
                statement.setString(3, runningShift);
                statement.setDate(4, sqlEndDate);
                statement.setDouble(5, fWorkHour);
                statement.setInt(6, wagesRate);
                statement.setDouble(7, netPayable);
                statement.setDouble(8, 0);
                statement.setDate(9, null);
                statement.setInt(10, (int) fOThour);
                statement.setInt(11, (int) totalOtAllowance);
                statement.setString(12, "");
                statement.setInt(13, blockStatus);
                statement.setString(14, department);
                statement.setString(15, name);
                statement.setDouble(16, doubleWages);
                statement.executeUpdate();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (checkUserInSallery()) {

            try {
                String sql_2 = "update sallery set daily_wages = '" + wagesRate + "',"
                        + "reli_allo = '" + totalReleiverAllowance + "',"
                        + "special_allo = '" + totalSpecialAllowance + "',"
                        + "extra_allo = '" + extraAllowance + "',"
                        + "working_day = '" + fWorkHour / 8 + "',"
                        + "working_hour = '" + fWorkHour + "',"
                        + "ot_hour = '" + (int) fOThour + "',"
                        + "net_payable = '" + netPayable + "' ,"
                        + "deduct = '"+deduction+"' ,"
                        + "hollyDayAllow = '" + hollyDayAllo + "' ,"
                        + "department='" + department + "', "
                        + "designation='" + designation + "', "
                        + "r_department='" + runningDepartment + "', "
                        + "block_status='" + blockStatus + "', "
                        + "ot_rate='" + otRate + "', "
                        + "hollyDayHour='" + hollyDayHour + "', "
                        + "subtotal='" + basic + "', "
                        + "attn_allow='" + (int)totalAttendanceAllowance + "', "
                        + "night_allow='" + (int)totalNightAllowance + "', "
                        + "total='" + payable + "', "
                        + "double_wages='" + doubleWages + "', "
                        + "r_shift='" + runningShift + "' "
                        + "where card_no='" + cardNo + "' and "
                        + "week_start_date='" + sqlStartDate + "' and "
                        + "week_end_date='" + sqlEndDate + "'";

                PreparedStatement statement = connection.prepareStatement(sql_2);
                statement.executeUpdate();
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            try {
                String sql = "insert into sallery"
                        + "(card_no,name,daily_wages,reli_allo,special_allo,"
                        + "extra_allo,working_day,working_hour,ot_hour,net_payable,"
                        + "week_start_date,week_end_date,department,r_shift,block_status,"
                        + "hollyDayAllow,r_department,ot_rate,designation,hollyDayHour,"
                        + "subtotal,attn_allow,night_allow,total,deduct,double_wages )"
                        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                try (PreparedStatement st_5 = connection.prepareStatement(sql)) {
                    st_5.setInt(1, cardNo);
                    st_5.setString(2, name);
                    st_5.setDouble(3, wagesRate);
                    st_5.setInt(4, releiverAllowance);
                    st_5.setInt(5, specialAllowance);
                    st_5.setInt(6, extraAllowance);
                    st_5.setInt(7, fWorkHour / 8);
                    st_5.setInt(8, fWorkHour);
                    st_5.setInt(9, (int) fOThour);
                    st_5.setDouble(10, netPayable);
                    st_5.setDate(11, sqlStartDate);
                    st_5.setDate(12, sqlEndDate);
                    st_5.setString(13, department);
                    st_5.setString(14, runningShift);
                    st_5.setInt(15, blockStatus);
                    st_5.setInt(16, hollyDayAllo);
                    st_5.setString(17, runningDepartment);
                    st_5.setInt(18, otRate);
                    st_5.setString(19, designation);
                    st_5.setInt(20, hollyDayHour);
                    st_5.setDouble(21, basic);
                    st_5.setInt(22, (int)totalAttendanceAllowance);
                    st_5.setInt(23, (int)totalNightAllowance);
                    st_5.setDouble(24,payable);
                    st_5.setInt(25,deduction);
                    st_5.setDouble(26,doubleWages);
                    st_5.executeUpdate();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }    
        }else{
            System.err.println("Not Eligibal");
        }
        
    }

    private boolean checkUserInSallery() {
        try {
            String sql = "select * from sallery where card_no='" + cardNo + "' "
                    + "and week_start_date='" + sqlStartDate + "' and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean elegibleForWages(int fWorkHour) {

        if (fWorkHour > 0) {
            return true;
        } else {
            return false;
        }
    }

    private void checkBlockWages() {
        if (fWorkHour <= 8) {
            if (fOThour > 4 && fOThour <= 16) {
                blockStatus = 0;
            } else {
                blockStatus = 1;
            }
        } else {
            blockStatus = 0;
        }
        System.err.println("Block Status\t"+blockStatus);
    }

    private void removeBlockData() {
        try {
            String sql = "delete from block where endofweek='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getWeekInfo() {
        try {
            String sql = "select * from running_week";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                sqlStartDate = rs.getDate("week_start_date");
                sqlEndDate = rs.getDate("week_end_date");
                millWorkingHour = rs.getInt("mill_running_hour");
                hollyDayHour = rs.getInt("hollyday_hours");

                startDateTF.setText(String.valueOf(sqlStartDate));
                endDateTF.setText(String.valueOf(sqlEndDate));
                millWorkHourTF.setText(String.valueOf(millWorkingHour));
                hollyDayTF.setText(String.valueOf(hollyDayHour));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void uploadAttnData() {

        int i = 0;
        java.sql.Date sqldate;
        String workTime;
        double dWorkTime;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String data;

            while ((data = reader.readLine()) != null) {

                i++;
                progressbar.setMaximum((int) lines);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setValue(i);

                String[] value = data.split(",");
                if (!value[0].equals("AC-No.")) {
                    String str_date = value[2];
                    DateFormat formatter;
                    formatter = new SimpleDateFormat("MM/dd/yyyy");
                    Date date = formatter.parse(str_date);
                    sqldate = new java.sql.Date(date.getTime());

                    if (value[8].equals("")) {
                        workTime = "00:00";
                    } else {
                        workTime = value[8];
                    }
                    dWorkTime = getWorkTime(workTime);

                    lbl_data.paintImmediately(0, 0, 1000, 100);
                    lbl_data.setText(value[0] + " " + value[1] + " " + value[2]);

                    try {

                        int card_no = Integer.parseInt(value[0]);
                        String sql = "select * from attendance where card_no='" + card_no + "' and date ='" + sqldate + "'";
                        PreparedStatement st = connection.prepareStatement(sql);
                        ResultSet rs = st.executeQuery();
                        if (rs.next()) {
                            // JOptionPane.showMessageDialog(null, "user name is exist!");
                            //userNameTF.requestFocus();

                            String sql_2 = "update attendance set name = '" + value[1] + "',"
                                    + "time_table = '" + value[3] + "',"
                                    + "on_duty = '" + value[4] + "',"
                                    + "off_duty = '" + value[5] + "',"
                                    + "clock_in = '" + value[6] + "',"
                                    + "clock_out = '" + value[7] + "',"
                                    + "work_time = '" + dWorkTime + "',"
                                    + "department = '" + value[9] + "' "
                                    + "where card_no='" + card_no + "' and date='" + sqldate + "'";

                            PreparedStatement statement = connection.prepareStatement(sql_2);
                            statement.executeUpdate();

                            // JOptionPane.showMessageDialog(null, "user name is exist!");
                            //userNameTF.requestFocus();
                            System.err.println("update successful.");
                            st.close();
                            rs.close();

                        } else {
                            String sql_1 = "insert into attendance"
                                    + "(card_no,name,date,time_table,on_duty,off_duty,clock_in,clock_out,"
                                    + "work_time,department)"
                                    + " values(?,?,?,?,?,?,?,?,?,?)";
                            try (PreparedStatement statement2 = connection.prepareStatement(sql_1)) {
                                statement2.setInt(1, Integer.parseInt(value[0]));
                                statement2.setString(2, value[1]);
                                statement2.setDate(3, sqldate);
                                statement2.setString(4, value[3]);
                                statement2.setString(5, value[4]);
                                statement2.setString(6, value[5]);
                                statement2.setString(7, value[6]);
                                statement2.setString(8, value[7]);

                                statement2.setDouble(9, dWorkTime);
                                statement2.setString(10, value[9]);
                                statement2.executeUpdate();
                            }

                        }

                        //dispose();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                        e.printStackTrace();

                    }
                }

            }
            fileName = null;
            file_name_lbl.setText("");
            JOptionPane.showMessageDialog(this, lines + " data upload successfull.");
            progressbar.setValue(0);
            lbl_data.setText("");

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex, "File import error", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void totalAttendanceData(int cardNo) {
        try {
            String sql = "select * from total_atten_by_week where card_no='" + cardNo + "' "
                    + "and week_start_date='" + sqlStartDate + "' and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                updateTotalAttnData(cardNo);
            } else {
                insertTotalAttnData(cardNo);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateTotalAttnData(int cardNo) {
        try {
            String sql = "update total_atten_by_week set total_work_hour='" + finallWorkHour + "', "
                    + "total_ot_hour='" + totalOT + "',r_shift='"+runningShift+"',"
                    + "r_department='"+runningDepartment+"',hollyDayHour='"+hollyDayHour+"'"
                    + "where card_no='" + cardNo + "' and week_start_date='" + sqlStartDate + "'"
                    + " and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void insertTotalAttnData(int cardNo) {

        try {
            String sql = "insert into total_atten_by_week (card_no,week_start_date,week_end_date,"
                    + "total_work_hour,total_ot_hour,r_shift,r_department,hollyDayHour,"
                    + "modify_holl_hour,modify_attn_hour,modify_ot_hour) "
                    + "values(?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, cardNo);
            statement.setDate(2, sqlStartDate);
            statement.setDate(3, sqlEndDate);
            statement.setInt(4, finallWorkHour);
            statement.setInt(5, (int) totalOT);
            statement.setString(6, runningShift);
            statement.setString(7, runningDepartment);
            statement.setInt(8, hollyDayHour);
            statement.setInt(9, -1);
            statement.setInt(10, -1);
            statement.setInt(11, -1);
            statement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void finalCalculation() {

        int length = 0;
        try {
            String sql = "SELECT COUNT(id) FROM employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                length = rs.getInt("COUNT(id)");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        int i = 0;
        try {
            String sql = "select * from employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {

                lbl_data.paintImmediately(0, 0, 1000, 100);
                lbl_data.setText("Calculating wages");
                i++;
                progressbar.setValue(i);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setMaximum(length);

                cardNo = rs.getInt("card_no");
                name = rs.getString("name");
                designation = rs.getString("designation");
                department = rs.getString("department");
                releiverAllowance = rs.getInt("reliever_allowance");
                specialAllowance = rs.getInt("special_allowance");
                extraAllowance = rs.getInt("extra_allowance");
                otRate = rs.getInt("ot_rate");
                wagesRate=rs.getInt("wages_rate");
             
                if(wagesRate<=0){
                    getWagesInfo(designation, department);  
                }
                 
              
                     calculate();
          resetFieldVariable();

            }
            lbl_data.setText("");
            progressbar.setValue(0);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void getTotalAttendenceData() {
        try {
            String sql = "select * from total_atten_by_week where card_no='" + cardNo + "' "
                    + "and week_start_date='" + sqlStartDate + "' and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                
                runningDepartment=rs.getString("r_department");
                runningShift=rs.getString("r_shift");

                if(rs.getInt("modify_attn_hour")>=0){
                    fWorkHour=rs.getInt("modify_attn_hour");
                    System.out.println(cardNo+"\t"+fWorkHour);
                }else{
                    fWorkHour=rs.getInt("total_work_hour");
                    System.out.println(cardNo+"\t"+fWorkHour);
                }
                
                 if(rs.getInt("modify_ot_hour")>=0){
                    fOThour=rs.getInt("modify_ot_hour");
                }else{
                    fOThour=rs.getInt("total_ot_hour");
                }
                 
                  if(rs.getInt("modify_holl_hour")>=0){
                    fHollyDayHour=rs.getInt("modify_holl_hour");
                }else{
                    fHollyDayHour=rs.getInt("hollyDayHour");
                }
                  System.out.println("demo_wages.Wages.getTotalAttendenceData()"+fHollyDayHour);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getDepartmentDisplayName(String r_ddepartment) {
        try {
            String sql="select department_code from department where department_name='"+r_ddepartment+"'";
           PreparedStatement statement=connection.prepareStatement(sql);
           ResultSet rs=statement.executeQuery();
           if(rs.next()){
               return rs.getString("department_code");
           }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return null;
            }
*/
}
