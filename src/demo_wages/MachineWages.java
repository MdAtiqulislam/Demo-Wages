/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo_wages;


import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author madinajute
 */
public class MachineWages extends javax.swing.JPanel {

  String fileName = "";
    long lines = 0;
    public static Connection connection = null;
    String runningDepartment = "";
    private int millWorkingHour = 0;
    java.sql.Date sqlStartDate = null;
    java.sql.Date sqlEndDate = null;
    private int attnAllowance;
    private int nightAllowance;
    private int redAllowance;
    private String designation;
    private String department;
    private int releiverAllowance;
    private int specialAllowance;
    private int extraAllowance;
    private int cardNo;
    private int wagesRate;
    private int otRate;
    private int deduction;
    private String runningShift = "";
    private String clockIn;
    private String clockOut;
    private double totalWorkHour = 0;
    private double totalOT = 0;
    private int finallWorkHour;
    private String name;
    private int blockStatus = 0;
    private int hollyDayHour;
    private int hollyDayAllo;
    private int fWorkHour=0;
    private int fOThour=0;
    private int fHollyDayHour;
    private double doubleWages;
    private String r_ddepartment;
    private boolean modified;

    /**
     * Creates new form MachineWages
     */
    public MachineWages() {
        initComponents();
        connection = DBconnect.dbconnect();
        getWeekInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        btn_brows_file = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnSaleryManagement = new javax.swing.JButton();
        btnDepartment = new javax.swing.JButton();
        btnAllowance = new javax.swing.JButton();
        btnSetupWeek = new javax.swing.JButton();
        file_name_lbl = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        btn_upload_attn_data = new javax.swing.JButton();
        btn_add_user = new javax.swing.JButton();
        btn_upload_user_data = new javax.swing.JButton();
        btn_weekend_ot = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        millWorkHourTF = new javax.swing.JTextField();
        startDateTF = new javax.swing.JTextField();
        endDateTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        hollyDayTF = new javax.swing.JTextField();
        changeWeekBTN = new javax.swing.JButton();
        refressBTN = new javax.swing.JButton();
        btnCalculation = new javax.swing.JButton();
        btnPreview = new javax.swing.JButton();
        progressbar = new javax.swing.JProgressBar();
        lbl_data = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Controll", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        btn_brows_file.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_File_20px.png"))); // NOI18N
        btn_brows_file.setText("Brows File");
        btn_brows_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_brows_fileActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sallery Controll", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 102))); // NOI18N

        btnSaleryManagement.setText("Sallery Management");
        btnSaleryManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaleryManagementActionPerformed(evt);
            }
        });

        btnDepartment.setText("Add/Update Department");
        btnDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepartmentActionPerformed(evt);
            }
        });

        btnAllowance.setText("Allowance Management");
        btnAllowance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllowanceActionPerformed(evt);
            }
        });

        btnSetupWeek.setText("Add/ Update Designation");
        btnSetupWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetupWeekActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaleryManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAllowance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSetupWeek, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaleryManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAllowance, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetupWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        file_name_lbl.setForeground(new java.awt.Color(153, 153, 255));
        file_name_lbl.setEnabled(false);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Area", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        btn_upload_attn_data.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_External_20px.png"))); // NOI18N
        btn_upload_attn_data.setText("Upload Atten. Data");
        btn_upload_attn_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_upload_attn_dataActionPerformed(evt);
            }
        });

        btn_add_user.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_Add_20px.png"))); // NOI18N
        btn_add_user.setText("Add/Update Employee");
        btn_add_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_userActionPerformed(evt);
            }
        });

        btn_upload_user_data.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_External_20px.png"))); // NOI18N
        btn_upload_user_data.setText("Upload Employee Data");
        btn_upload_user_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_upload_user_dataActionPerformed(evt);
            }
        });

        btn_weekend_ot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_External_20px.png"))); // NOI18N
        btn_weekend_ot.setText("Upload OT");
        btn_weekend_ot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_weekend_otActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btn_upload_attn_data, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(btn_weekend_ot, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btn_upload_user_data, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_add_user, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_upload_attn_data)
                    .addComponent(btn_weekend_ot, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_upload_user_data)
                    .addComponent(btn_add_user))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(file_name_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_brows_file)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file_name_lbl)
                    .addComponent(btn_brows_file, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wages calculation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 102))); // NOI18N

        jLabel2.setText("Week Start Date");

        jLabel3.setText("Week End Date");

        jLabel4.setText("Total W.H.");

        millWorkHourTF.setEditable(false);

        startDateTF.setEditable(false);

        endDateTF.setEditable(false);

        jLabel5.setText("Holly Day Hrs");

        hollyDayTF.setEditable(false);

        changeWeekBTN.setText("Change Week");
        changeWeekBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeWeekBTNActionPerformed(evt);
            }
        });

        refressBTN.setText("Refress");
        refressBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refressBTNActionPerformed(evt);
            }
        });

        btnCalculation.setText("Calculate");
        btnCalculation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculationActionPerformed(evt);
            }
        });

        btnPreview.setText("Preview");
        btnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startDateTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(hollyDayTF, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(millWorkHourTF, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(endDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(changeWeekBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refressBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCalculation, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeWeekBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refressBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(millWorkHourTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCalculation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel5)
                    .addComponent(hollyDayTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPreview))
                .addGap(0, 24, Short.MAX_VALUE))
        );

        progressbar.setStringPainted(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Wages From Machine Data");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_data, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_data, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_brows_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_brows_fileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser("C:\\Users\\");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("files", "csv", "xls");
            fileChooser.setFileFilter(filter);
            fileChooser.showOpenDialog(null);
            File file = fileChooser.getSelectedFile();
            if (file != null) {
                fileName = file.getAbsolutePath();
                file_name_lbl.setText(fileName);

                Path path = Paths.get(fileName);

                try {
                    lines = Files.lines(path).count();
                } catch (IOException ex) {
                    Logger.getLogger(Wages.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }//GEN-LAST:event_btn_brows_fileActionPerformed

    private void btnSaleryManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaleryManagementActionPerformed
        // TODO add your handling code here:
        new SalleryManagement().setVisible(true);
    }//GEN-LAST:event_btnSaleryManagementActionPerformed

    private void btnDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepartmentActionPerformed
        // TODO add your handling code here:
        new Department().setVisible(true);
    }//GEN-LAST:event_btnDepartmentActionPerformed

    private void btnAllowanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllowanceActionPerformed
        // TODO add your handling code here:
        new AllowanceManagement().setVisible(true);
    }//GEN-LAST:event_btnAllowanceActionPerformed

    private void btnSetupWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetupWeekActionPerformed
        // TODO add your handling code here:
        new Designation().setVisible(true);
    }//GEN-LAST:event_btnSetupWeekActionPerformed

    private void btn_upload_attn_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_upload_attn_dataActionPerformed

        uploadAttnData();
    }//GEN-LAST:event_btn_upload_attn_dataActionPerformed

    private void btn_add_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_userActionPerformed
        // TODO add your handling code here:
        new Employee().setVisible(true);
    }//GEN-LAST:event_btn_add_userActionPerformed

    private void btn_upload_user_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_upload_user_dataActionPerformed

        // java.sql.Date sqldate;
        int i = 0;
        try {
            // TODO add your handling code here:

            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String data;
            while ((data = reader.readLine()) != null) {
                i++;
                progressbar.setValue(i);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setMaximum((int) lines);
                String[] value = data.split(",");

                lbl_data.paintImmediately(0, 0, 1000, 100);
                lbl_data.setText(value[0] + " " + value[1] + " " + value[2]);
                if (!value[0].equals("AC No.")) {

                    try {
                        int card_no = Integer.parseInt(value[0]);
                        String sql = "select * from employee where card_no='" + card_no + "'";
                        PreparedStatement st = connection.prepareStatement(sql);
                        ResultSet rs = st.executeQuery();
                        if (rs.next()) {

                            String sql_2 = "update employee set name = '" + value[1] + "'"
                            + " where card_no='" + card_no + "'";

                            PreparedStatement statement = connection.prepareStatement(sql_2);
                            statement.executeUpdate();
                            System.err.println("update successful.");
                            st.close();
                            rs.close();
                        } else {
                            String sql_1 = "insert into employee"
                            + "(card_no,name,gender,designation,phone,address,department)"
                            + " values(?,?,?,?,?,?,?)";
                            try (PreparedStatement statement2 = connection.prepareStatement(sql_1)) {
                                statement2.setInt(1, Integer.parseInt(value[0]));
                                statement2.setString(2, value[1]);
                                statement2.setString(3, value[2]);
                                statement2.setString(4, value[3]);
                                statement2.setString(5, value[4]);
                                //statement2.setString(6, value[5]);
                                statement2.setString(6, value[6]);
                                statement2.setString(7, value[7]);
                                statement2.executeUpdate();
                                //dispose();
                            }
                        }
                    } catch (NumberFormatException | SQLException e) {
                        // JOptionPane.showMessageDialog(null, e);
                        e.printStackTrace();
                    }
                }
            }
            fileName = null;
            file_name_lbl.setText("");
            lbl_data.setText("");
            progressbar.setValue(0);
            JOptionPane.showMessageDialog(this, lines + " data upload successfull.");

        } catch (HeadlessException | IOException ex) {
            ex.printStackTrace();
            //JOptionPane.showMessageDialog(this, ex, "File import error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btn_upload_user_dataActionPerformed

    private void btn_weekend_otActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_weekend_otActionPerformed
        // TODO add your handling code here:
        int i = 0;
        java.sql.Date sqldate;
        String workDayOT, weekEndOT, hollyDayOT;
        double dWorkDayOT, dWeekEndOT, dHollyDayOT;

        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String data;
            while ((data = reader.readLine()) != null) {
                i++;
                progressbar.setValue(i);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setMaximum((int) lines);

                String[] value = data.split(",");

                lbl_data.paintImmediately(0, 0, 1000, 100);
                lbl_data.setText(value[0] + " " + value[1] + " " + value[2]);
                if (!value[0].equals("AC-No.")) {

                    String str_date = value[2];
                    DateFormat formatter;
                    formatter = new SimpleDateFormat("MM/dd/yyyy");
                    java.util.Date date =  formatter.parse(str_date);
                    sqldate = new java.sql.Date(date.getTime());

                    if (value[3].equals("")) {
                        workDayOT = "00:00:00";
                    } else {
                        workDayOT = value[3];
                    }

                    if (value[4].equals("")) {
                        weekEndOT = "00:00:00";
                    } else {
                        weekEndOT = value[4];
                    }
                    if (value[5].equals("")) {
                        hollyDayOT = "00:00:00";
                    } else {
                        hollyDayOT = value[5];
                    }

                    dWorkDayOT = getOtTime(workDayOT);
                    dWeekEndOT = getOtTime(weekEndOT);
                    dHollyDayOT = getOtTime(hollyDayOT);
                    System.out.println(dWorkDayOT + "\t" + dWeekEndOT + "\t" + dHollyDayOT);

                    if (!checkData(value[0], sqldate)) {
                        try {
                            String sql = "insert into over_time (card_no,name,date,work_day_ot,weekend_ot,"
                            + "holly_day_ot,total_ot) values(?,?,?,?,?,?,?)";
                            PreparedStatement statement = connection.prepareStatement(sql);
                            statement.setString(1, value[0]);
                            statement.setString(2, value[1]);
                            statement.setDate(3, sqldate);
                            statement.setDouble(4, dWorkDayOT);
                            statement.setDouble(5, dWeekEndOT);
                            statement.setDouble(6, dHollyDayOT);
                            statement.setString(7, value[6]);
                            statement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    } else {
                        try {
                            String sql_2 = "update over_time set work_day_ot = '" + dWorkDayOT + "',"
                            + "weekend_ot = '" + dWeekEndOT + "',"
                            + "holly_day_ot = '" + dHollyDayOT + "',"
                            + "total_ot = '" + value[6] + "'"
                            + " where card_no='" + value[0] + "' and date ='" + sqldate + "'";

                            PreparedStatement statement = connection.prepareStatement(sql_2);
                            statement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            fileName = null;
            file_name_lbl.setText("");
            lbl_data.setText("");
            progressbar.setValue(0);
            JOptionPane.showMessageDialog(this, lines + " data upload successfull.");

        } catch (HeadlessException | IOException ex) {
            ex.printStackTrace();

        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_weekend_otActionPerformed

    private void changeWeekBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeWeekBTNActionPerformed
        // TODO add your handling code here:
        new RunningWeek().setVisible(true);
    }//GEN-LAST:event_changeWeekBTNActionPerformed

    private void refressBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refressBTNActionPerformed
        // TODO add your handling code here:
        getWeekInfo();
    }//GEN-LAST:event_refressBTNActionPerformed

    private void btnCalculationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculationActionPerformed
        // TODO add your handling code here:
        getWeekInfo();
        removeBlockData();
        calculateWages();

    }//GEN-LAST:event_btnCalculationActionPerformed

    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed

        new PrewiewSallery(sqlStartDate, sqlEndDate).setVisible(true);

    }//GEN-LAST:event_btnPreviewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllowance;
    private javax.swing.JButton btnCalculation;
    private javax.swing.JButton btnDepartment;
    private javax.swing.JButton btnPreview;
    private javax.swing.JButton btnSaleryManagement;
    private javax.swing.JButton btnSetupWeek;
    private javax.swing.JButton btn_add_user;
    private javax.swing.JButton btn_brows_file;
    private javax.swing.JButton btn_upload_attn_data;
    private javax.swing.JButton btn_upload_user_data;
    private javax.swing.JButton btn_weekend_ot;
    private javax.swing.JButton changeWeekBTN;
    private javax.swing.JTextField endDateTF;
    private javax.swing.JTextField file_name_lbl;
    private javax.swing.JTextField hollyDayTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lbl_data;
    private javax.swing.JTextField millWorkHourTF;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JButton refressBTN;
    private javax.swing.JTextField startDateTF;
    // End of variables declaration//GEN-END:variables

private double getOtTime(String workDayOT) throws ParseException {
        SimpleDateFormat timeFormeter = new SimpleDateFormat("HH:mm:ss");
        java.util.Date time =  timeFormeter.parse(workDayOT);
        double hour = time.getHours() + ((double) time.getMinutes() / 60.0);
        hour = Double.parseDouble(new DecimalFormat(".##").format(hour));
        //System.err.println(hour);
        return hour;
    }

    private double getWorkTime(String workDayOT) throws ParseException {
        SimpleDateFormat timeFormeter = new SimpleDateFormat("HH:mm");
        java.util.Date time = timeFormeter.parse(workDayOT);
        double hour = time.getHours() + ((double) time.getMinutes() / 60.0);
        hour = Double.parseDouble(new DecimalFormat(".##").format(hour));
        //System.err.println(hour);
        return hour;
    }

    private boolean checkData(String cardNo, java.sql.Date sqldate) {
        try {
            String sql = "select * from over_time where card_no='" + cardNo + "' and date='" + sqldate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void calculateWages() {
        //getting attendence and night allowance 

        int length = 0;
        try {
            String sql = "SELECT COUNT(id) FROM employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                length = rs.getInt("COUNT(id)");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        int i = 0;
        try {
            String sql = "select * from allo_management";
            PreparedStatement st = connection.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                attnAllowance = rs.getInt("att_allo");
                nightAllowance = rs.getInt("night_allo");
                redAllowance = rs.getInt("red_night_all");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            String sql = "select * from employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {

                lbl_data.paintImmediately(0, 0, 1000, 100);
                lbl_data.setText("Calculating Attendence Time");
                i++;
                progressbar.setValue(i);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setMaximum(length);

                cardNo = rs.getInt("card_no");
                
                if(rs.getString("pay_able_code")!=null){
                    if(rs.getString("pay_able_code").equals("c")){
                    deduction=0;
                }else if(rs.getString("pay_able_code").equals("g")){
                    deduction=10;
                }
                }
               
                getAttendenceInfo(cardNo);
                getOTInfo(cardNo);
                totalAttendanceData(cardNo);
                resetFieldVariable();
            }
            lbl_data.setText("");
            progressbar.setValue(0);
            //JOptionPane.showMessageDialog(this, length + " data upload successfull.");

            finalCalculation();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void getWagesInfo(String designation, String department) {
        try {
            String sql = "select * from wages_mangement where department='" + department + "' and designation='" + designation + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                wagesRate = rs.getInt("wages_rate");
                // otRate = rs.getInt("ot_rate");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getAttendenceInfo(int cardNo) {
        double workHour;
        
        try {
            String sql = "select * from attendance where card_no='" + cardNo + "' and "
                    + "(date between '" + sqlStartDate + "' and '" + sqlEndDate + "')";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
               r_ddepartment= rs.getString("department");
               
                runningDepartment = getDepartmentDisplayName(r_ddepartment);
                runningShift = rs.getString("time_table");
                workHour = rs.getDouble("work_time");
                if (workHour >= 7.5) {
                    workHour = 8.0;
                }
                totalWorkHour += workHour;

            }
            finallWorkHour = (int) Math.round(totalWorkHour);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void getOTInfo(int cardNo) {
        double workDayOT, weekendOT, hollydayOT;
        try {
            String sql = "select * from over_time where card_no='" + cardNo + "' and "
                    + "(date between '" + sqlStartDate + "' and '" + sqlEndDate + "')";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                workDayOT = rs.getDouble("work_day_ot");
                weekendOT = rs.getDouble("weekend_ot");
                hollydayOT = rs.getDouble("holly_day_ot");
                if (workDayOT >= 6.5) {
                    workDayOT = 8;
                }
                if (weekendOT >= 6.5) {
                    weekendOT = 8;
                }
                if (hollydayOT >= 6.5) {
                    hollydayOT = 8;
                }
                totalOT += workDayOT + weekendOT + hollydayOT;

            }
            totalOT = Math.round(totalOT);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void resetFieldVariable() {
        runningDepartment = "";
        // millWorkingDay = 0;

        //attnAllowance = 0;
        //nightAllowance = 0;
        // redAllowance = 0;
        designation = "";
        department = "";
        releiverAllowance = 0;
        specialAllowance = 0;
        extraAllowance = 0;
        cardNo = 0;
        wagesRate = 0;
        otRate = 0;
        runningShift = "";
        r_ddepartment="";
        deduction=0;

        totalWorkHour = 0;
        finallWorkHour = 0;
        totalOT = 0;
        blockStatus = 0;
        fWorkHour=0;
        fOThour=0;
        fHollyDayHour=0;
        modified=false;
    }

    private void calculate() {        
        
        getTotalAttendenceData();
      
       // System.out.println("demo_wages.Wages.calculate()"+fWorkHour);
        if(!modified){
            if(elegibleForWages(fWorkHour)){
            System.err.println("Elegibal");
            double basic, totalAttendanceAllowance, totalNightAllowance, 
                    totalReleiverAllowance, totalSpecialAllowance, payable, totalOtAllowance,netPayable;
        basic = (fWorkHour / 8.0) * wagesRate;
        hollyDayAllo = (fHollyDayHour / 8) * wagesRate;
        if (fWorkHour >= millWorkingHour) {
            totalAttendanceAllowance = (fWorkHour / 8) * attnAllowance;
        } else {
            totalAttendanceAllowance = 0;
        }

        if (runningShift.equals("Night") && fWorkHour >= millWorkingHour) {
            totalNightAllowance = nightAllowance * (fWorkHour / 8);
        } else if (runningShift.equals("Night") && fWorkHour < millWorkingHour) {
            totalNightAllowance = redAllowance * (fWorkHour / 8);
        } else {
            totalNightAllowance = 0;
        }
        
        

        totalReleiverAllowance = (fWorkHour / 8) * releiverAllowance;
        totalSpecialAllowance = (fWorkHour / 8) * specialAllowance;
        payable = basic + totalAttendanceAllowance + totalNightAllowance + totalReleiverAllowance + totalSpecialAllowance+extraAllowance;
        

        totalOtAllowance = (fOThour / 8.0) * otRate;
        doubleWages=totalOtAllowance;
        payable += totalOtAllowance + hollyDayAllo;
        
        
        //Add 10 tk/day for Softner Department
        if(runningDepartment!=null && runningDepartment.equals("2001")){
            payable+=(fWorkHour / 8)*10;
            totalSpecialAllowance+=(fWorkHour / 8)*10;
        }
          //  System.err.println(runningDepartment);
        
        
        lbl_data.paintImmediately(0, 0, 1000, 100);
        lbl_data.setText(cardNo + " " + name + " " + payable);
        //System.out.println(cardNo + "\t" + fWorkHour);
        netPayable=payable-deduction;

        checkBlockWages();
        if (blockStatus == 1) {
            try {
                String sql = "insert into block (card_no,r_department,r_shift,endofweek,wohrs,"
                        + "rate,bill_amount,paid_amount,paid_date,ot_hrs,ot_wages,reson_to_paid,"
                        + "block_status,department,name,double_wages) "
                        + "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setInt(1, cardNo);
                statement.setString(2, runningDepartment);
                statement.setString(3, runningShift);
                statement.setDate(4, sqlEndDate);
                statement.setDouble(5, fWorkHour);
                statement.setInt(6, wagesRate);
                statement.setDouble(7, netPayable);
                statement.setDouble(8, 0);
                statement.setDate(9, null);
                statement.setInt(10, (int) fOThour);
                statement.setInt(11, (int) totalOtAllowance);
                statement.setString(12, "");
                statement.setInt(13, blockStatus);
                statement.setString(14, department);
                statement.setString(15, name);
                statement.setDouble(16, doubleWages);
                statement.executeUpdate();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (checkUserInSallery()) {

            try {
                String sql_2 = "update sallery set daily_wages = '" + wagesRate + "',"
                        + "reli_allo = '" + totalReleiverAllowance + "',"
                        + "special_allo = '" + totalSpecialAllowance + "',"
                        + "extra_allo = '" + extraAllowance + "',"
                        + "working_day = '" + fWorkHour / 8 + "',"
                        + "working_hour = '" + fWorkHour + "',"
                        + "ot_hour = '" + (int) fOThour + "',"
                        + "net_payable = '" + netPayable + "' ,"
                        + "deduct = '"+deduction+"' ,"
                        + "hollyDayAllow = '" + hollyDayAllo + "' ,"
                        + "department='" + department + "', "
                        + "designation='" + designation + "', "
                        + "r_department='" + runningDepartment + "', "
                        + "block_status='" + blockStatus + "', "
                        + "ot_rate='" + otRate + "', "
                        + "hollyDayHour='" + hollyDayHour + "', "
                        + "subtotal='" + basic + "', "
                        + "attn_allow='" + (int)totalAttendanceAllowance + "', "
                        + "night_allow='" + (int)totalNightAllowance + "', "
                        + "total='" + payable + "', "
                        + "double_wages='" + doubleWages + "', "
                        + "r_shift='" + runningShift + "' "
                        + "where card_no='" + cardNo + "' and "
                        + "week_start_date='" + sqlStartDate + "' and "
                        + "week_end_date='" + sqlEndDate + "'";

                PreparedStatement statement = connection.prepareStatement(sql_2);
                statement.executeUpdate();
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            try {
                String sql = "insert into sallery"
                        + "(card_no,name,daily_wages,reli_allo,special_allo,"
                        + "extra_allo,working_day,working_hour,ot_hour,net_payable,"
                        + "week_start_date,week_end_date,department,r_shift,block_status,"
                        + "hollyDayAllow,r_department,ot_rate,designation,hollyDayHour,"
                        + "subtotal,attn_allow,night_allow,total,deduct,double_wages )"
                        + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                try (PreparedStatement st_5 = connection.prepareStatement(sql)) {
                    st_5.setInt(1, cardNo);
                    st_5.setString(2, name);
                    st_5.setDouble(3, wagesRate);
                    st_5.setInt(4, releiverAllowance);
                    st_5.setInt(5, specialAllowance);
                    st_5.setInt(6, extraAllowance);
                    st_5.setInt(7, fWorkHour / 8);
                    st_5.setInt(8, fWorkHour);
                    st_5.setInt(9, (int) fOThour);
                    st_5.setDouble(10, netPayable);
                    st_5.setDate(11, sqlStartDate);
                    st_5.setDate(12, sqlEndDate);
                    st_5.setString(13, department);
                    st_5.setString(14, runningShift);
                    st_5.setInt(15, blockStatus);
                    st_5.setInt(16, hollyDayAllo);
                    st_5.setString(17, runningDepartment);
                    st_5.setInt(18, otRate);
                    st_5.setString(19, designation);
                    st_5.setInt(20, hollyDayHour);
                    st_5.setDouble(21, basic);
                    st_5.setInt(22, (int)totalAttendanceAllowance);
                    st_5.setInt(23, (int)totalNightAllowance);
                    st_5.setDouble(24,payable);
                    st_5.setInt(25,deduction);
                    st_5.setDouble(26,doubleWages);
                    st_5.executeUpdate();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }    
        }else{
            System.err.println("Not Eligibal");
        }
        }
        
    }

    private boolean checkUserInSallery() {
        try {
            String sql = "select * from sallery where card_no='" + cardNo + "' "
                    + "and week_start_date='" + sqlStartDate + "' and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean elegibleForWages(int fWorkHour) {

        if (fWorkHour > 0) {
            return true;
        } else {
            return false;
        }
    }

    private void checkBlockWages() {
        if (fWorkHour <= 8) {
            if (fOThour > 4 && fOThour <= 16) {
                blockStatus = 0;
            } else {
                blockStatus = 1;
            }
        } else {
            blockStatus = 0;
        }
        System.err.println("Block Status\t"+blockStatus);
    }

    private void removeBlockData() {
        try {
            String sql = "delete from block where endofweek='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getWeekInfo() {
        try {
            String sql = "select * from running_week";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                sqlStartDate = rs.getDate("week_start_date");
                sqlEndDate = rs.getDate("week_end_date");
                millWorkingHour = rs.getInt("mill_running_hour");
                hollyDayHour = rs.getInt("hollyday_hours");

                startDateTF.setText(String.valueOf(sqlStartDate));
                endDateTF.setText(String.valueOf(sqlEndDate));
                millWorkHourTF.setText(String.valueOf(millWorkingHour));
                hollyDayTF.setText(String.valueOf(hollyDayHour));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void uploadAttnData() {

        int i = 0;
        java.sql.Date sqldate;
        String workTime;
        double dWorkTime;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String data;

            while ((data = reader.readLine()) != null) {

                i++;
                progressbar.setMaximum((int) lines);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setValue(i);

                String[] value = data.split(",");
                if (!value[0].equals("AC-No.")) {
                    String str_date = value[2];
                    DateFormat formatter;
                    formatter = new SimpleDateFormat("MM/dd/yyyy");
                    java.util.Date date =  formatter.parse(str_date);
                    sqldate = new java.sql.Date(date.getTime());

                    if (value[8].equals("")) {
                        workTime = "00:00";
                    } else {
                        workTime = value[8];
                    }
                    dWorkTime = getWorkTime(workTime);

                    lbl_data.paintImmediately(0, 0, 1000, 100);
                    lbl_data.setText(value[0] + " " + value[1] + " " + value[2]);

                    try {

                        int card_no = Integer.parseInt(value[0]);
                        String sql = "select * from attendance where card_no='" + card_no + "' and date ='" + sqldate + "'";
                        PreparedStatement st = connection.prepareStatement(sql);
                        ResultSet rs = st.executeQuery();
                        if (rs.next()) {
                            // JOptionPane.showMessageDialog(null, "user name is exist!");
                            //userNameTF.requestFocus();

                            String sql_2 = "update attendance set name = '" + value[1] + "',"
                                    + "time_table = '" + value[3] + "',"
                                    + "on_duty = '" + value[4] + "',"
                                    + "off_duty = '" + value[5] + "',"
                                    + "clock_in = '" + value[6] + "',"
                                    + "clock_out = '" + value[7] + "',"
                                    + "work_time = '" + dWorkTime + "',"
                                    + "department = '" + value[9] + "' "
                                    + "where card_no='" + card_no + "' and date='" + sqldate + "'";

                            PreparedStatement statement = connection.prepareStatement(sql_2);
                            statement.executeUpdate();

                            // JOptionPane.showMessageDialog(null, "user name is exist!");
                            //userNameTF.requestFocus();
                            System.err.println("update successful.");
                            st.close();
                            rs.close();

                        } else {
                            String sql_1 = "insert into attendance"
                                    + "(card_no,name,date,time_table,on_duty,off_duty,clock_in,clock_out,"
                                    + "work_time,department)"
                                    + " values(?,?,?,?,?,?,?,?,?,?)";
                            try (PreparedStatement statement2 = connection.prepareStatement(sql_1)) {
                                statement2.setInt(1, Integer.parseInt(value[0]));
                                statement2.setString(2, value[1]);
                                statement2.setDate(3, sqldate);
                                statement2.setString(4, value[3]);
                                statement2.setString(5, value[4]);
                                statement2.setString(6, value[5]);
                                statement2.setString(7, value[6]);
                                statement2.setString(8, value[7]);

                                statement2.setDouble(9, dWorkTime);
                                statement2.setString(10, value[9]);
                                statement2.executeUpdate();
                            }

                        }

                        //dispose();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                        e.printStackTrace();

                    }
                }

            }
            fileName = null;
            file_name_lbl.setText("");
            JOptionPane.showMessageDialog(this, lines + " data upload successfull.");
            progressbar.setValue(0);
            lbl_data.setText("");

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex, "File import error", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void totalAttendanceData(int cardNo) {
        try {
            String sql = "select * from total_atten_by_week where card_no='" + cardNo + "' "
                    + "and week_start_date='" + sqlStartDate + "' and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                
              if(rs.getInt("modify_attn_hour")<0||rs.getInt("modify_attn_hour")<0)
              {
                  updateTotalAttnData(cardNo);
              }
                
            } else {
                insertTotalAttnData(cardNo);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void updateTotalAttnData(int cardNo) {
        try {
            String sql = "update total_atten_by_week set total_work_hour='" + finallWorkHour + "', "
                    + "total_ot_hour='" + totalOT + "',r_shift='"+runningShift+"',"
                    + "r_department='"+runningDepartment+"',hollyDayHour='"+hollyDayHour+"'"
                    + "where card_no='" + cardNo + "' and week_start_date='" + sqlStartDate + "'"
                    + " and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void insertTotalAttnData(int cardNo) {

        try {
            String sql = "insert into total_atten_by_week (card_no,week_start_date,week_end_date,"
                    + "total_work_hour,total_ot_hour,r_shift,r_department,hollyDayHour,"
                    + "modify_holl_hour,modify_attn_hour,modify_ot_hour) "
                    + "values(?,?,?,?,?,?,?,?,?,?,?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, cardNo);
            statement.setDate(2, sqlStartDate);
            statement.setDate(3, sqlEndDate);
            statement.setInt(4, finallWorkHour);
            statement.setInt(5, (int) totalOT);
            statement.setString(6, runningShift);
            statement.setString(7, runningDepartment);
            statement.setInt(8, hollyDayHour);
            statement.setInt(9, -1);
            statement.setInt(10, -1);
            statement.setInt(11, -1);
            statement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void finalCalculation() {

        int length = 0;
        try {
            String sql = "SELECT COUNT(id) FROM employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                length = rs.getInt("COUNT(id)");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        int i = 0;
        try {
            String sql = "select * from employee";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {

                lbl_data.paintImmediately(0, 0, 1000, 100);
                lbl_data.setText("Calculating wages");
                i++;
                progressbar.setValue(i);
                progressbar.paintImmediately(0, 0, 1000, 100);
                progressbar.setMaximum(length);

                cardNo = rs.getInt("card_no");
                name = rs.getString("name");
                designation = rs.getString("designation");
                department = rs.getString("department");
                releiverAllowance = rs.getInt("reliever_allowance");
                specialAllowance = rs.getInt("special_allowance");
                extraAllowance = rs.getInt("extra_allowance");
                otRate = rs.getInt("ot_rate");
                wagesRate=rs.getInt("wages_rate");
             
                if(wagesRate<=0){
                    getWagesInfo(designation, department);  
                }
                 
              
                     calculate();
          resetFieldVariable();

            }
            lbl_data.setText("");
            progressbar.setValue(0);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void getTotalAttendenceData() {
        try {
            String sql = "select * from total_atten_by_week where card_no='" + cardNo + "' "
                    + "and week_start_date='" + sqlStartDate + "' and week_end_date='" + sqlEndDate + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                
                runningDepartment=rs.getString("r_department");
                runningShift=rs.getString("r_shift");
                
               if(rs.getInt("is_modified")==1){
                   modified=true;
               }
               fWorkHour=rs.getInt("total_work_hour");
               System.out.println(cardNo+"\t"+fWorkHour);
               fOThour=rs.getInt("total_ot_hour");
               fHollyDayHour=rs.getInt("hollyDayHour");
               

//                if(rs.getInt("modify_attn_hour")>=0){
//                    fWorkHour=rs.getInt("modify_attn_hour");
//                    System.out.println(cardNo+"\t"+fWorkHour);
//                }else{
//                    fWorkHour=rs.getInt("total_work_hour");
//                    System.out.println(cardNo+"\t"+fWorkHour);
//                }
//                
//                 if(rs.getInt("modify_ot_hour")>=0){
//                    fOThour=rs.getInt("modify_ot_hour");
//                }else{
//                    fOThour=rs.getInt("total_ot_hour");
//                }
//                 
//                  if(rs.getInt("modify_holl_hour")>=0){
//                    fHollyDayHour=rs.getInt("modify_holl_hour");
//                }else{
//                    fHollyDayHour=rs.getInt("hollyDayHour");
//                }
                  System.out.println("demo_wages.Wages.getTotalAttendenceData()"+fHollyDayHour);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getDepartmentDisplayName(String r_ddepartment) {
        try {
            String sql="select department_code from department where department_name='"+r_ddepartment+"'";
           PreparedStatement statement=connection.prepareStatement(sql);
           ResultSet rs=statement.executeQuery();
           if(rs.next()){
               return rs.getString("department_code");
           }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return null;
            }



}
