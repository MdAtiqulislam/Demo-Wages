/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo_wages;

import static demo_wages.WeekSetup.connection;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author MJIL
 */
public class RunningWeek extends javax.swing.JFrame {

    /**
     * Creates new form WeekSetup
     */
    public static Connection connection = null;
    private Date startDate = null;
    private Date endDate = null;
    private int millRuningHour = 0;
    private int hollyDayHours = 0;

    public RunningWeek() {
        initComponents();
        connection = DBconnect.dbconnect();
        showDataTable();
        showRuningWeek();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        workHourTF = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        weekListTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        hollydayhrsTF = new javax.swing.JTextField();
        startDateTF = new javax.swing.JTextField();
        endDateTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Start Date");

        jLabel2.setText("End Date");

        jLabel3.setText("Mill Running Hours");

        workHourTF.setEditable(false);

        jButton1.setText("Confirm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        weekListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        weekListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weekListTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(weekListTable);

        jLabel4.setText("Holly Day Hours");

        hollydayhrsTF.setEditable(false);

        startDateTF.setEditable(false);

        endDateTF.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(endDateTF))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(startDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hollydayhrsTF)
                                    .addComponent(workHourTF)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(startDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(workHourTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(hollydayhrsTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (checkRuningWeek()) {
            updateRuningWeek();
        } else {
            insertRuningWeek();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void weekListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekListTableMouseClicked
        // TODO add your handling code here:
        setSelectData();
    }//GEN-LAST:event_weekListTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunningWeek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new RunningWeek().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField endDateTF;
    private javax.swing.JTextField hollydayhrsTF;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField startDateTF;
    private javax.swing.JTable weekListTable;
    private javax.swing.JTextField workHourTF;
    // End of variables declaration//GEN-END:variables

    private void showDataTable() {
        try {
            String sql_1 = "select week_start_date,week_end_date,mill_running_hour,hollyday_hours"
                    + " from week_setup ORDER BY week_start_date DESC";
            PreparedStatement st = connection.prepareStatement(sql_1);
            ResultSet rs_1 = st.executeQuery();
            weekListTable.setModel(DbUtils.resultSetToTableModel(rs_1));

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void showRuningWeek() {
        try {
            String sql = "select * from running_week";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                startDateTF.setText(String.valueOf(rs.getDate("week_start_date")));
                endDateTF.setText(String.valueOf(rs.getDate("week_end_date")));
                workHourTF.setText(String.valueOf(rs.getInt("mill_running_hour")));
                hollydayhrsTF.setText(String.valueOf(rs.getInt("hollyday_hours")));

                startDate = rs.getDate("week_start_date");
                endDate = rs.getDate("week_end_date");
                millRuningHour = rs.getInt("mill_running_hour");
                hollyDayHours = rs.getInt("hollyday_hours");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setSelectData() {
        int row = weekListTable.getSelectedRow();
        String tableClicked = (weekListTable.getModel().getValueAt(row, 0).toString());

        try {
            String sql = "select * from week_setup where week_start_date='" + tableClicked + "'";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                startDateTF.setText(String.valueOf(rs.getDate("week_start_date")));
                endDateTF.setText(String.valueOf(rs.getDate("week_end_date")));
                workHourTF.setText(String.valueOf(rs.getInt("mill_running_hour")));
                hollydayhrsTF.setText(String.valueOf(rs.getInt("hollyday_hours")));

                startDate = rs.getDate("week_start_date");
                endDate = rs.getDate("week_end_date");
                millRuningHour = rs.getInt("mill_running_hour");
                hollyDayHours = rs.getInt("hollyday_hours");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean checkRuningWeek() {
        try {
            String sql = "select* from running_week";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet rs = statement.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void updateRuningWeek() {
        try {
            String sql = "update running_week set mill_running_hour = '" + millRuningHour + "',"
                    + "hollyday_hours = '" + hollyDayHours + "',"
                    + "week_start_date = '" + startDate + "',"
                    + "week_end_date = '" + endDate + "' "
                    + " where id='1'";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.executeUpdate();
            JOptionPane.showMessageDialog(this, "Update Successful");
            this.dispose();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void insertRuningWeek() {
        if (startDate != null && endDate != null && millRuningHour != 0) {
            try {
                String sql = "insert into running_week (week_start_date,week_end_date,mill_running_hour,hollyday_hours) "
                        + "values(?,?,?,?)";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setDate(1, startDate);
                statement.setDate(2, endDate);
                statement.setInt(3, millRuningHour);
                statement.setInt(4, hollyDayHours);
                statement.executeUpdate();
                JOptionPane.showMessageDialog(this, "Update Successful");
                this.dispose();

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }

}
